# even simpler tank plant dynamic
# a tank that is filled by an unlimited water suply
# using a plc cycle time delta' = 1
# using a tank capacity of full' = 30
# using a water increase of c' = 2 when water is pumped into the tank
# locations names: P/nP pump is switched on/off; full/nfull tank is full/not full
# discreteLoc =0: sfc state off; discreteLoc =1: sfc state on
# unsafe set: full tank
# WRITE transitions: priority 1
# USER input: priority 2 (toggle the pump status)
# READ transitions: priority 3
# SFC jump: priority 4


hybrid reachability
{
 state var h, t
 discrete var P, calP, P+, P-, calP+, calP-, discreteLoc

 setting
 {
  fixed steps 0.1
  time 1
  remainder estimation 1e-5
  identity precondition
  gnuplot octagon t, h
  adaptive orders { min 3 , max 5 }
  cutoff 1e-12
  output simple_tank_plant_dynamic
  max jumps 40
  print on
 }

 modes
 {
  P
  {
   poly ode 1
   {
    h' = 2
	t' = 1
   }

   inv
   {
    P in [1,1]
    t >= 0
   }
  }

  nP
  {
   poly ode 1
   {
    h' = 0
	t' = 1
   }

   inv
   {
    P in [0,0]
    t >= 0
   }
  }

#plc locations
  user
  {
	poly ode 1
    {
     h' = 0
     t' = 0
    }
    inv
    {
    	t >= 0
    }
  }

  read
  {
	poly ode 1
    {
     h' = 0
     t' = 0
    }
    inv
    {
    	t >= 0
    }
  }

  sfc_state_change
  {
	poly ode 1
    {
     h' = 0
     t' = 0
    }
    inv
    {
    	t >= 0
    }
  }

  dynamic_state_change
  {
	poly ode 1
    {
     h' = 0
     t' = 0
    }
    inv
    {
    	t >= 0
    }
  }


 }

 jumps
 {

#01 write transitions
   start P
   end user
   guard {}
   reset{ P+' := calP+ P-' := calP- P' := calP }
   parallelotope aggregation {}
   time 1

   start nP
   end user
   guard {}
   reset{ P+' := calP+ P-' := calP- P' := calP }
   parallelotope aggregation {}
   time 1

#02 user input
   start user
   end read
   guard {P >= 1}
   reset{ P+' := 0 P-' := 1 }
   parallelotope aggregation {}
   time 0

   start user
   end read
   guard {P <= 0}
   reset{ P+' := 1 P-' := 0 }
   parallelotope aggregation {}
   time 0

#03 read
   start read
   end sfc_state_change
   guard { }
   reset{ calP+' := P+ calP-' := P- calP' := P }
   parallelotope aggregation {}
   time 0

#04 sfc_state_change
   start sfc_state_change
   end dynamic_state_change
   guard { discreteLoc <= 0 calP+ >= 1 calP- <= 0 }
   reset{ calP+' := 0 calP-' := 0 calP' := 1 discreteLoc' := 1 }
   parallelotope aggregation {}
   time 0

   start sfc_state_change
   end dynamic_state_change
   guard { discreteLoc >= 1 calP- >= 1 }
   reset{ calP+' := 0 calP-' := 0 calP' := 0 discreteLoc' := 0 }
   parallelotope aggregation {}
   time 0

   start sfc_state_change
   end dynamic_state_change
   guard { discreteLoc <= 0 calP+ <= 0  }
   reset{ }
   parallelotope aggregation {}
   time 0

   start sfc_state_change
   end dynamic_state_change
   guard { discreteLoc <= 0  calP- >= 1 }
   reset{ }
   parallelotope aggregation {}
   time 0

   start sfc_state_change
   end dynamic_state_change
   guard { discreteLoc >= 1 calP- <= 0 }
   reset{ }
   parallelotope aggregation {}
   time 0

#05 switch back to the correct location in the automaton for the dynamic
   start dynamic_state_change
   end P
   guard { P >= 1 }
   reset{ }
   parallelotope aggregation {}
   time 0

   start dynamic_state_change
   end nP
   guard { P <= 0 }
   reset{ }
   parallelotope aggregation {}
   time 0


 }

 init
 {
  read
  {
   h in [10,20]
   t in [0,0]
   P in [1,1]
   calP in [1,1]
   P+ in [1,1]
   P- in [0,0]
   calP+ in [1,1]
   calP- in [0,0]
   discreteLoc in [1,1]
  }
 }
}

#unsafe set
#{
# P  { h in [40,40] }
# nP { h in [40,40] }
#}
