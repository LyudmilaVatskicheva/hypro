/**
 * A simple example file to test the vertex enumeration algorithm.
 */

#include "../src/lib/representations/GeometricObject.h"
#include "../src/lib/algorithms/convexHull/vertexEnumeration.h"

int main() {
	using Number = mpq_class;

    hypro::HPolytope<Number> poly;

    hypro::matrix_t<Number> constraints = hypro::matrix_t<Number>(20,8);
    constraints << 0, 0, 1, 0, 0, 0, 0, 0,
0, 1, 1, 0, 0, 0, 0, 0,
0, 1, 0, 0, 0, 0, 0, 0,
0, 1, -1, 0, 0, 0, 0, 0,
0, 0, -1, 0, 0, 0, 0, 0,
0, -1, -1, 0, 0, 0, 0, 0,
0, -1, 0, 0, 0, 0, 0, 0,
0, -1, 1, 0, 0, 0, 0, 0,
1, 0, 0, 0, 0, 0, 0, 0,
-1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, -1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, -1, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, -1, 0, 0,
0, 0, 0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 0, 0, -1, 0,
0, 0, 0, 0, 0, 0, 0, 1,
0, 0, 0, 0, 0, 0, 0, -1;

	hypro::vector_t<Number> constants = hypro::vector_t<Number>(20);
	constants << Number("845307651747246314042932816856700297692947646179105408332710149731068259187161876094951067855628009892664792429549873175853951923822527360461465400231472529411516484052559828455545297766519505563404259050939691072582704638977868999252481951572012031018151774070313811372694308624784431058466014383964866654236222881092614857703272250098731469172793632430627207012573500299293914999877808918306199485941610646339916637178427559817288111374152308554186513851042367358268134828761010876627912078225394957147343483702008378429289753634162885531884154684888346786382828839885813933705425918067647750007807125809986746194938063330779710977478600777565058723614325546632634308187971927991/38821262783866334566523915196663379999638415885049455435520368521594723258656161411700375903713678173091708984226890500372389485939302021575539057588449032946542467398986015552337085676349382442915064793615611120384631804534173560939011957977730508295432244779182349454512385722112284092580887675944697481876444645252379234759067505184217171089309793780514375170533830108335803632036245354895727021145228657739746683761716242559581099163418325667423387580848573306729539053740153284802671416513627730216870294766425683855980174671641574703305594251548344428158850951536217486960085266189800795532872300081912590094754024300668555469982547723045171701584624884181627194542215135232"),
Number("37077794127536058437593532594080381925064671288534997955208804466128825553793550235196824633547678037902323368892114605666013867602205565350443444930496062205535955289714936028084750383075321442209816717220526909729687423391940042136214119689367817853873800978888149187759691060969424252367513495561064030797488267194701887861940407088341275639796512486061385924235053007240414106012399208337641658803212787508602383981421785229203209949626555043465152086184977826995620177263057789553946458146555254200411271363407793207798480180213540548594004329728001493669707373543141898386874952208098201204890450308250180453208479402946069862965881021978771991194795704911164901033639529501750133861/1560590034767033326719142515171887601412404548908069332004806388093359619159261924775535858189839196945290441747298045585721320122657397931948926496675967282417020241887504671112044005465669339648569467807074033895178513531814288881189962560087534619142592049783206108914795381639208834996784710547527261999137119443906619471741972182404727931452269819638039694198476340305320296100943456178517157671925722530482836468583436737648649733209249594356970032052223646389331083243976929571424971642155515573854037703232546277849786762428725467389798883248705209716585071063699814405256234126515429077314712023637733943489221418573396404023464039583516322629328010938050189524074125045285257216"),
Number("2252971602860607923348458105275059/1135293761909910741897809911349248"),
Number("-43014756571885853717585545070099835712951671805444817975503602092812621645654557164121161947094378725201916796270788963765423830098021260756190974628753681087595010197795659806322297261780626689448048634963888864654662535787893715692582572119098968330296329330239617324664827315468868839450034823433977889050173607761322051707089698342913676356214133789584970277349206226071352994019808137628273886244485300943870868028610403679981274770633606795627592001330237010703315075137420097123715797230356988871035000672406392634453351943775773087941577271478386285431664834775321872172159101302449288830011433069120003648907352068446408926529512882057543529597090883757134335699207043010096697806636005/2180504774867576742125114215616131685209055420275370620826407634442072954037514698416046742674447210987065109213018995531782985836300718769854930517877058441978815609592720039122552357800802637106510366073545859453394169640570410667753932577793666083439223032310638854765128465883133399731392497903032063810316356537729089831121507534393540412390986412362677839964631295441142982641417326219765706731102449216989064081835303896381560515381693019972983594854360497668211458772065129282011684552540593180771650954125313868346335407855050513526516083440471628877513875427404355381270573264825279485125512395499374635595388331894725230990108683491316094983698606050982804358911613811148965225168896"),
Number("-1177678662704496561145654427814445403926277130994467225670830477514348018276376956637918201180644221275168557193385906737588896257073767648393975535818401713066465562019793831156703458177676951001055340692782387236377742489476288343957809353911863667078012297964417656382276141645085904427016953509333538185847396097538473159801111990856746865490815011475798719085835166691148780877023748987457920063630315440129326726709028960119939665216324260480790918164472278670762119338015567751926076843782654703428595898964981701850512011015383128699064573637137090898068885913629299443700553665801894438533414721320231373452347323389841954688957811660981999374065432188680149160026243954430511671/54242271820764342512718776554149171100274783465483535667627560029796316773415407065431527924321766267467101635740322440725814133828456902908012012973366230752930478266352629496207498556651323980096658896648333941346139480881087858724376617057182375836135090805061733310677795214892668814960886268347885607299706628130627090561646649336048942178287412473741880933900153976100143244593635133466311561481768982682363998699066547307766058765202150590619647252976632929935020581596408114278121385966752587118647898826787724679775035436632429064274378761685144833700819473865900695522726896563641555343190696715750810170683260127647426427879185137618128301776787011549979146657413795615342592"),
Number("-40106406864470367742909565129617991924658774106766320875945689906440579287516516584275049291520310214602222939538566878589882978757399359098542194628635316356061692531277212053231628388706825393075909525335445626765946839170435075537948495238817512037694069000712408997512598387957776345187070389258183951941428017072938387710998171273931121918741957565372514318715290195709622685484873457933001988893467183611044274329334550619762590692361706928617184075825680241460771649941407234034001579889074695388545830730678833548680982547373636464619433219887201272684833636801374564744589008924614788778367788226136058729225939906613207004623572097549340083638739614262212629558253137191607260739/1699923894879761394507868297491214498529666783022090953101897768998637499543583857572206617750368803840471971563094589003293867695315978089209952634735360767953851170138814167363123667711683024367025241838617347154684440157049545618838901646608902919231827464707106829530179239383070699180875885475912487067709649437517676811766558474071463990814964672213209204295541356353109628946328328816717670272242316448720454168232817644414152971189864268029827321499298231027393752616224358607749657255221575023908169480622261896885491479104810302856329431244068391283823140920069871022314519676420437390171290390329327403549384224239217524483444041406870424925545807125365077867531923893728051200"),
Number("-6773413839565226271/3602879701896396800"),
Number("968230766957852044098222860220015709031254078534492778270893699678798302741001737460577967006370510962065474483818247407188598023791121703842483525863733598483330035343964096210208749246502955982933055187181954108341743795362649623379298365479358545558172426749022756479106843028163694025347761815438969461525875843507971799200969030551313185070987793840933246705097799213026204266813403742352347159843003936325676876512172333461035871013222731281968887985703381758088745745255737385883410609324084797911740961018776055080167671001577965910931333429399529277163313145418842194968276191948408265224032694404101781063486237291442413690862747528270407788538325557789153699287767940300535055049/48694432885326229868895265937258678205405956447955199003576177733397862297877897808933344672465177325207495834296888748938734485773694732567761598374285787400606520905710570199816163378056985604715946076297529239452830817048366697462214023900768297097795388528148045981153166443215981156878508522541929636700256131011500149474604768582499352460563922679246312505670262546696424179394414210379023048532388033214302027919727117846149426721308216155341898033698100173461228329897276937272336941245970873510306316816785807031189609019292845428794777960220418978128426225193250367464787425409070800350795520031677409227679475457256317520905408444087674264254800166685636408300850685286337740800"),
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0;

	hypro::VertexEnumeration<Number> ve(constraints, constants);
    ve.enumerateVertices();
    std::vector<hypro::Point<Number>> vertices = ve.getPoints();

    std::cout << "Computed vertices: " << std::endl;
    for(const auto& vertex : vertices) {
    	std::cout <<  hypro::convert<Number,double>(vertex.rawCoordinates()).transpose() << std::endl;
    }

	/*
    poly.insert(hypro::Halfspace<Number>({0, 0, 45908267, 0, 0, 0, 0, 0 }, 1000000000));
	poly.insert(hypro::Halfspace<Number>({0, 42057358, 42057358, 0, 0, 0, 0, 0 }, 1000000000));
	poly.insert(hypro::Halfspace<Number>({0, 501382969, 0, 0, 0, 0, 0, 0 }, 1000000000));
	poly.insert(hypro::Halfspace<Number>({0, 50696426, -50696427, 0, 0, 0, 0, 0 }, -1000000000));
	poly.insert(hypro::Halfspace<Number>({0, 0, -46041068, 0, 0, 0, 0, 0 }, -1000000000));
	poly.insert(hypro::Halfspace<Number>({0, -42352525, -42352525, 0, 0, 0, 0, 0 }, -1000000000));
	poly.insert(hypro::Halfspace<Number>({0, -529100530, 0, 0, 0, 0, 0, 0 }, -1000000000));
	poly.insert(hypro::Halfspace<Number>({0, -50296650, 50296649, 0, 0, 0, 0, 0 }, 1000000000));
	poly.insert(hypro::Halfspace<Number>({1, 0, 0, 0, 0, 0, 0, 0 }, 0));
	poly.insert(hypro::Halfspace<Number>({-1, 0, 0, 0, 0, 0, 0, 0 }, 0));
	poly.insert(hypro::Halfspace<Number>({0, 0, 0, 1, 0, 0, 0, 0 }, 0));
	poly.insert(hypro::Halfspace<Number>({0, 0, 0, -1, 0, 0, 0, 0 }, 0));
	poly.insert(hypro::Halfspace<Number>({0, 0, 0, 0, 1, 0, 0, 0 }, 0));
	poly.insert(hypro::Halfspace<Number>({0, 0, 0, 0, -1, 0, 0, 0 }, 0));
	poly.insert(hypro::Halfspace<Number>({0, 0, 0, 0, 0, 1, 0, 0 }, 0));
	poly.insert(hypro::Halfspace<Number>({0, 0, 0, 0, 0, -1, 0, 0 }, 0));
	poly.insert(hypro::Halfspace<Number>({0, 0, 0, 0, 0, 0, 1, 0 }, 0));
	poly.insert(hypro::Halfspace<Number>({0, 0, 0, 0, 0, 0, -1, 0 }, 0));
	poly.insert(hypro::Halfspace<Number>({0, 0, 0, 0, 0, 0, 0, 1 }, 0));
	poly.insert(hypro::Halfspace<Number>({0, 0, 0, 0, 0, 0, 0, -1 }, 0));

	std::cout << poly << std::endl;

    hypro::VertexEnumeration<Number> ve(poly.matrix(), poly.vector());
    ve.enumerateVertices();
    std::vector<hypro::Point<Number>> vertices = ve.getPoints();

    std::cout << "Computed vertices: " << std::endl;
    for(const auto& vertex : vertices) {
    	std::cout <<  hypro::convert<Number,double>(vertex.rawCoordinates()).transpose() << std::endl;
    }
	*/
	exit(0);
}
